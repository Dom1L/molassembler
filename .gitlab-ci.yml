#
# Define the CI stages
#
stages:
  - build
  - test
  - quality_checks

#
# Build with GCC on Linux (docker)
#
build_gcc:
  stage: build
  tags:
    - default_docker
  image: gitlab.chab.ethz.ch:4567/reiher/docker/scine-gcc:latest
  script:
    - mkdir -p gcc_build
    - cd gcc_build
    - pwd
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make -j8
  cache:
    key: gcc_build
    paths:
      - gcc_build/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    expire_in: 30 days
    paths:
      - gcc_build/src/molassembler/lib/libmolassembler.so

#
# Test with GCC on Linux (docker)
#
test_gcc:
  stage: test
  tags:
    - default_docker
  image: gitlab.chab.ethz.ch:4567/reiher/docker/scine-gcc:latest
  script:
    - mkdir -p gcc_build
    - cd gcc_build
    - make check
  cache:
    key: gcc_build
    paths:
      - gcc_build/
    policy: pull

#
# Build in with clang docker image
#
build_clang:
  stage: build
  tags:
    - default_docker
  image: gitlab.chab.ethz.ch:4567/reiher/docker/scine-clang:latest
  only:
    - master
  script:
    - mkdir -p build_clang
    - cd build_clang
    - pwd
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    - make -j8
  cache:
    key: build_clang
    paths:
      - build_clang/

#
# Test in with clang in docker image
#
test_clang:
  stage: test
  tags:
    - default_docker
  image: gitlab.chab.ethz.ch:4567/reiher/docker/scine-clang:latest
  only:
    - master
  script:
    - mkdir -p build_clang
    - cd build_clang
    - make check
  cache:
    key: build_clang
    paths:
      - build_clang/
    policy: pull

#
# Verify that the ETH license is present in all source files
#
eth_license:
  stage: quality_checks
  tags:
    - default_docker
  image: gitlab.chab.ethz.ch:4567/reiher/docker/scine-gcc:latest
  script:
    - bash scripts/license_validity_check.sh
