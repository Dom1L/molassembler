/*!

@mainpage User Manual
 
@tableofcontents

Molassembler is a C++ library that aims to facilitate conversions between
Cartesian and graph representations of molecules. It provides the necessary
functionality to represent a molecule as a graph, modify it in graph space, and
generate new coordinates from graphs. It can capture the absolute configuration
of multidentate and haptic inorganic molecules from positional data and
generate non-superposable stereopermutations as output.

This is the documentation for molassembler's C++ code. 


@section manual-quickstart Quick start

--------------------------------------------------------------------------------

@subsection manual-quickstart-data Basic data types

The following types of data are instrumental as input to the library:

Data type      | Description
-------------- | -----------
Bond orders    | Fractional bond order matrix from a quantum chemical calculation
Element types  | Atomic element type information
Bonds          | Graph connectivity between atoms, discretized as integer bonds
Positions      | Cartesian coordinates of atoms

Conceptually, molecules are composed of a \masm{Graph} and a
\masm{StereopermutatorList, list of stereopermutators}. Stereopermutators are
objects representing a distinct permutation of the spatial arrangement of
substituents around either an atom or a bond. Those types are named
\masm{AtomStereopermutator} and \masm{BondStereopermutator}.

@note Stereopermutators are not called stereocenters - which might seem the more
natural choice - because these objects also manage shape and ranking
combinations in which there is only one possible arrangement and its central
atom is consequentially not a stereocenter.

Enumeration of distinct arrangements is only possible as a result of
Molassembler classifying the local shape of an atom's substituents into a
polyhedral shape.

Since we want to be able to deal with inorganic molecules and possibly haptic
ligands, we need to add an abstraction allowing multiple atoms to bind at a
single vertex of the local shape, like so:

The representation of a \masm{Molecule} is composed of smaller parts, some of
which are concepts, some of which are concrete types:

Data type               | Description
-----------------       | -----------
\masm{Graph} | Element types and bond orders
\link Scine::shapes::Shape Shape \endlink | Idealization of spatial arrangement of atoms around a centroid
Binding site            | Contiguous atom set, all connected to the central atom
Ranked binding site     | All binding sites at an atom, sorted using IUPAC ranking rules
Stereopermutation       | Abstract representation of an absolute configuration of (possibly bridged) ligand sites around an atom
Stereopermutator        | Object managing absolute configuration of ligand sites around an atom (\masm{AtomStereopermutator}) or bond (\masm{BondStereopermutator})
\masm{Molecule}         | Product type of a \masm{Graph} and a \masm{StereopermutatorList,list of stereopermutators}

@note Stereopermutators are not called stereocenters - which might seem the more
natural choice - because these objects also manage shape and ranking
combinations in which there is only one possible arrangement and its central
atom is consequentially not a stereocenter.

@subsection manual-quickstart-flow Dataflow & conversions

@image html records.svg "Data flow paths in molassembler"

Solid lines indicate default information flow paths, while dashed lines
indicate optional information flow paths. In brief, the algorithms employed in
data conversions are the following: 

-# From positional data, atom-pairwise distances can be used to approximate fractional bond orders using e.g. UFF parameters
-# Integer bonds are obtained from fractional bond orders by rounding to the nearest integer (see @ref manual-algorithms-discretization)
-# From a fully specified molecular graph, VSEPR or LFT may be applied to guess local shapes (see @ref manual-algorithms-shape-det)
-# Ligands are ranked using an algorithm implementing IUPAC sequence rules (see @ref manual-algorithms-ranking)
-# Shape and ranked ligands are combined in a symbolic permutation that determines which stereopermutations exist (see @ref manual-algorithms-symbolic-perm)
-# Positional data is used to fit idealized shapes directly (see @ref manual-algorithms-shape-fit)
-# Positional data is used to find the realized permutation within the set of possible stereopermutations via fitting (see @ref manual-algorithms-shape-fit)

Depending on the type of information you supply when constructing
\masm{Molecule} instances, molecules will have varying levels of stored
information. For correctness, it is preferable to supply positional
information, since fitting idealized shapes to positions is more accurate
(in particular for transition metals, since LFT is not implemented) and does
not require the graph to be absolutely correct. Additionally, only supplying
positional information allows you to determine the currently realized index of
permutation for stereocenters.

@subsection manual-quickstart-examples Examples

@section manual-cheatsheet Cheatsheet

IO            | Description
------------- | -----------
<code>\link Scine::molassembler::io::read(const std::string&) io::read(...)\endlink</code> | Extract a single \masm{Molecule} from an XYZ, MOL or MASM file
<code>\link Scine::molassembler::io::split(const std::string&) io::split(...)\endlink</code> | Extract multiple \masm{Molecule, Molecules} from an XYZ, MOL or MASM file
<code>\link Scine::molassembler::io::write(const std::string&, const Molecule&) io::write(...)\endlink</code> | Write a single \masm{Molecule} to XYZ, MOL or MASM
<code>\link Scine::molassembler::interpret::molecules(const Utils::AtomCollection &, BondDiscretizationOption, const boost::optional< double > &) interpret::molecules(...)\endlink</code> | Find (possibly multiple) \masm{Molecule, Molecules} in various input data types


Information           | Description
--------------------- | -----------
<code>\link Scine::molassembler::Molecule::graph() mol.graph()\endlink</code> | Yields the molecular \masm{Graph} (purely connectivity and element type data)
<code>\link Scine::molassembler::Molecule::stereopermutators() mol.stereopermutators()\endlink</code> | Yields \masm{StereopermutatorList, list of stereopermutators}
<code>\link Scine::molassembler::Molecule::dumpGraphviz() mol.dumpGraphviz()\endlink</code> | Yields a graphviz string of the molecule representation
<code>\link Scine::molassembler::Molecule::modularCompare() mol.modularCompare(...)\endlink</code> | Compare two molecules, choosing which parts are to be compared

Molecule manipulation  | Description
---------------------- | -----------
<code>\link Scine::molassembler::Molecule::addAtom() mol.addAtom(...)\endlink</code> | Adds an atom to the molecule, attaching it to an existing one
<code>\link Scine::molassembler::Molecule::addBond() mol.addBond(...)\endlink</code> | Adds a bond between two existing atoms
<code>\link Scine::molassembler::Molecule::assignStereopermutator() mol.assignStereopermutator(...)\endlink</code> | Changes the assignment of a sterepermutator
<code>\link Scine::molassembler::Molecule::removeAtom() mol.removeAtom(...)\endlink</code> | Removes a removable (!) atom
<code>\link Scine::molassembler::Molecule::removeBond() mol.removeBond(...)\endlink</code> | Removes a removable (!) bond
<code>\link Scine::molassembler::Molecule::setBondType() mol.setBondType(...)\endlink</code> | Changes the bond type between two atoms
<code>\link Scine::molassembler::Molecule::setElementType() mol.setElementType(...)\endlink</code> | Changes an atom element type
<code>\link Scine::molassembler::Molecule::setShapeAtAtom() mol.setShapeAtAtom(...)\endlink</code> | Changes the local idealized shape at an atom


@section manual-sublibraries Sub-libraries

--------------------------------------------------------------------------------

@subsection manual-sublibraries-temple Temple

Temple is a data structure and algorithm library that consists of
- Constexpr containers (of which upper bounds on sizes must still be set)
  - <code>\link Scine::temple::Array Array\endlink</code>: like std::array, fixed-size 
  - <code>\link Scine::temple::Bitmask Bitmask\endlink</code>: Composition helper from an enum
  - <code>\link Scine::temple::DynamicArray DynamicArray\endlink</code>: managed array with fixed-size maximal number of elements, more
    like std::vector but without reallocation on exceeding reserved size
  - <code>\link Scine::temple::DynamicSet DynamicSet\endlink</code>: fixed-maximum-size managed set
  - <code>\link Scine::temple::DynamicMap DynamicMap\endlink</code>: fixed-maximum-size associative container
  - <code>\link Scine::temple::Generator JSF\endlink</code>: A good PRNG
  - <code>\link Scine::temple::BTree BTree\endlink</code>: A B-tree that stores merely values, not key-value pairs
  - <code>\link Scine::temple::Vector Vector\endlink</code>: 3D cartesian coordinate system constexpr class with basic
    computations
  - <code>\link Scine::temple::UpperTriangularMatrix UpperTriangularMatrix\endlink</code>: stores data of an upper triangular matrix in a linear
    array
  - <code>\link Scine::temple::Optional Optional\endlink</code>: To represent operations that may frequently return no result
  - <code>\link Scine::temple::Pair Pair\endlink</code>: Minimal replacement for std::pair, where some member functions are not 
    yet marked constexpr
- <code>\link Scine::temple::TinySet TinySet\endlink</code>, <code>\link Scine::temple::TinyUnorderedSet TinyUnorderedSet\endlink</code>: Set-like use of linear memory for very few
  elements
- CRTP base classes that supply comparison operators
- A collection of pseudo-functional-style composable range manipulation
  functions
  - map (= transform)
  - reduce / accumulate
  - variadic concatenate
  - condense an iterable to a delimiter-separated string of its values
  - group values of a container by mapping value or equality
  - all of, any of
  - composable set union, intersection, difference
- Range adaptors: zip, unary and binary allPairs, unary sequentialPairs
- Some SFINAE container and function traits
  - test for insert / push back / emplace / emplace back members
  - C++14 is callable implementation (in lieu of C++17's standardization)
  - get container value type
  - get function return type
- boost::optional composition functions

@subsection manual-sublibraries-shapes Shapes

Non-terminal atoms in molecules often adopt nearly ideal local shapes when
no strain is placed upon its substituents due to small cycles. The local
shapes currently provided by this library are:

Size | Name
---- | ----
2    | Linear, bent
3    | Trigonal planar, cut tetrahedral, T-shaped
4    | Tetrahedral, trigonal pyramidal, square planar, seesaw
5    | Square pyramidal, trigonal bipyramidal, pentagonal planar
6    | Octahedral, trigonal prismatic, pentagonal pyramidal
7    | Pentagonal bipyramidal
8    | Square antiprismatic

Data provided per shape:
- Number of vertices
- String representation
- Angle function returning idealized angles between vertices
- Idealized coordinates
- A minimal set of rotations to allow the generation of all superimposable
  sequences of binding site mapping indices
- A set of tetrahedra whose signed volumes permit the distinction of chiral
  elements within the shape

In addition, this libraries can compute site addition and site loss
transitions between shapes at compile-time.


@subsection manual-sublibraries-stereopermutation Stereopermutation

Figuring out all non-superimposable arrangements of substituents around the
idealized shapes is a permutational problem and is the core task of this
library. It builds upon the definitions provided by the chemical shapes
library to achieve its task.

Most of organic chemistry can be composed of linear, bent, equilateral triangle
and tetrahedron shapes. The most common source of chiral information in
organic chemistry is an asymmetric tetrahedral carbon, where its four
subtituents are all different (i.e. have different ranking according to the
IUPAC rules). From a local shape and the information that all substituents
are distinct ranking-wise, we know that there are two non-superimposable
permutations of ligands. 

Stereopermutations of any shape can be computed symbolically 
@cite bennett1969computation , including cases in which substituents are
mutually linked, such as in multidentate ligands. Special care is taken in
order to reduce haptically bonded ligands to the correct local shapes and
ranking. 


@section manual-algorithms Important algorithms

--------------------------------------------------------------------------------

@subsection manual-algorithms-discretization Bond discretization

In the discretization of fractional bond orders to classic integer internal bond
types (e.g. single, double, etc.), there are two options. You can choose to 
round bond orders to the nearest integer, but this is particularly error prone 
for particularly weakly-bound metal ligands (around 0.5) and aromatic bonds
(around 1.5). For instance, two adjacent aromatic bonds that both show a
fractional bond order around 1.5 may be randomly rounded up or down depending on
the bond order generation method or its particular conformation. This can cause
unexpected ranking inequivalency / equivalency artifacts. If you expect there
to be conjugated systems or transition metals in your set of interpreted
molecules, discretizing bond orders in this fashion is disadvised.

It is instead preferable to discretize bond orders in a purely binary manner,
i.e. bond orders are interpreted as a single bond if the fractional bond order
is is more than or equal to 0.5. Double bond stereocenters (i.e. in organic
molecules E/Z stereocenters) are still interpreted from coordinate information
despite the main bond type discretized to a single bond. This part of a
`Molecule`'s interpretation is discussed elsewhere.

@subsection manual-algorithms-shape-det Shape determination

If no coordinates are present when constructing a Molecule, the idealized
shape on any non-terminal atom must be determined from its local
substituents within the set of appropriately sized shapes. For main-group
atoms, this is accomplished by application of a very basic valence shell
electron pair repulsion (VSEPR) algorithm. No shape determination algorithms
are currently implemented for non-main-group atoms, and the first shape of
appropriate size is chosen instead.

@subsection manual-algorithms-ranking Ranking

In order to establish the relative priority of an atom's substituents, a ranking
algorithm is applied that follows the IUPAC recommendations laid out in the 2013
Blue Book @cite IUPAC2013, generalized to larger shapes. The IUPAC
sequence rules are as follows, slightly reworded:

Nr. | Sequence rule
--- | -------------
1a  | Higher atomic number precedes lower. Atomic numbers in Mancude rings and ring systems are the mean of the atomic numbers in all mesomeric Kekule structures.
1b  | A duplicate atom node whose corresponding nonduplicated atom node is closer to the root ranks higher than a duplicate atom node whose corresponding nonduplicated atom node is farther from the root
2   | Higher atomic mass number precedes lower
3   | When considering double bonds and planar tetraligand atoms Z precedes E and this precedes nonstereogenic double bonds.
4a  | Chiral stereogenic units precede pseudoasymmetric stereogenic units and these precede nonstereogenic units
4b  | When two ligands have different descriptor pairs, then the one with the first chosen *like* descriptor pairs has priority over the one with a corresponding *unlike* descriptor pair. Descriptors are alike if they are within the same set. The two sets are {R, M, Z} and {S, P, E}.
4c  | r precedes s and m precedes p
5   | An atom or group with descriptors {R, M, Z} has priority over its enantiomorph {S, P, E}


The following alterations arise due to the current implementation state:

- Stereodescriptors are transformed into the index of permutation within the
  shape's abstract ligand case set of stereopermutations. The descriptors R/S
  correspond to indices of permutation within the set of stereopermutations of
  the abstract tetrahedral ABCD ligand case. Z/E exist as indices of
  permutations within the set of stereopermutations of the bond-centric
  stereocenter. M and P stereocenters are not modelled.
- For larger or smaller shapes, sequence rule 5 is altered to give priority
  according to the index of permutation: {R = 1, Z = 1} > {S = 0, E = 0}.
- *Like* is altered to mean stereodescriptors with the same index of
  permutation. This is strictly equivalent, as indices of permutation are
  implemented 'canonically', enabling a bijective mapping.
- No distinction is made whether a stereocenter is merely pseudoasymmetric. When
  based on indices of permutation, sequence rules 4c and 5 can be conflated, and
  I cannot think of a molecule in which removing the distinction changes the
  sequence rule application for sequence rule 4a. Additionally, 
  it does not affect whether the exact chirality of that stereocenter must be
  fixed in the final conformation for this library. Keeping this information
  merely permits direct generation of the enantiomer for molecules in which
  each stereocenter has only two stereopermutations. Since we aim to be
  applicable to stereocenters with many more stereopermutations, the value of
  the distinction is slight. Sequence rule 4a is shortened to enforce priority
  of stereogenic units over nonstereogenic units. Sequence rule 4c is conflated
  with 5.
- Conjugation detection is currently not implemented. No regularization of
  Mancude rings and rings systems is performed. This is the only change that can
  lead to false differences between substituents when they are actually
  identical.

In summary, the currently applied sequence rules are:

Nr. | Sequence rule
--- | -------------
1a  | Higher atomic number precedes lower. \diffminus{Atomic numbers in Mancude rings and ring systems are the mean of the atomic numbers in all mesomeric Kekule structures.}
1b  | A duplicate atom node whose corresponding nonduplicated atom node is closer to the root ranks higher than a duplicate atom node whose corresponding nonduplicated atom node is farther from the root
2   | Higher atomic mass number precedes lower
3   | When considering double bonds and planar tetraligand atoms Z precedes E and this precedes nonstereogenic double bonds.
4a  | Chiral stereogenic units precede \diffminus{pseudoasymmetric stereogenic units and these precede} nonstereogenic units
4b  | When two ligands have different descriptor pairs, then the one with the first chosen *like* descriptor pairs has priority over the one with a corresponding *unlike* descriptor pair. Descriptors are alike if they \diffplus{have an equal number of stereopermutations and equal index of permutation} \diffminus{are within the same set. The two sets are {R, M, Z} and {S, P, E}}.
4c  | \diffminus{r precedes s and m precedes p}
5   | An atom or group with \diffplus{higher index of permutation has priority} \diffminus{descriptors {R, M, Z} has priority over its enantiomorph {S, P, E}} 

@subsection manual-algorithms-symbolic-perm Symbolic permutation
@subsection manual-algorithms-shape-fit Shape fitting
@subsection manual-algorithms-cycle-detection Cycle detection

Cycle detection and enumeration is handled by the excellent library
RingDecomposerLib @cite Flachsenberg2017 , which avoids exponential space
requirements in heavily fused ring systems using Unique Ring Families
@cite Kolodzik2012 .

@subsection manual-algorithms-conformer-generation Conformer Generation

For each sought conformation, unassigned stereocenters in the input molecule are
assigned randomly according to the relative statistical occurrence weights of
the stereopermutations.

Conformer generation itself is based on four-dimensional Distance Geometry
@cite Blaney1994 . This library's implementation features the following:

1. A spatial model generates atom-pairwise bounds on their distance in the final
   conformations and four-atom chiral constraints when distance bounds cannot
   encompass chiral elements of complex shapes. For large shapes, chiral
   information is captured by using multiple chiral constraints.
2. The distance bounds are smoothed to conform to the triangle inequalities.
   After each successive choice of a fixed distance between the bounds, you can
   choose to re-smooth all bounds (full metrization) or stop re-smoothing after
   a fixed number of chosen distances (partial metrization). Smoothing is
   performed by transferring the problem to a graph shortest-paths problem
   @cite havel1984distance  and finding the shortest paths with the GOR1
   algorithm @cite Cherkassky1996  instead of the naive Floyd-Warshall
   algorithm.
3. The bounds are embedded in four dimensions and refined in two stages,
   permitting the chiral constraints to invert by expanding into four
   dimensions, and then compressing the fourth dimension back out.
4. The refinement error function is modified to enable the placement of haptic
   ligand's bonding atoms' average position at shapes' idealized ligand
   sites.

@subsection manual-algorithms-canonicalization Canonicalization

Molecule instances can be canonicalized. Graph canonicalization is an algorithm
that reduces all isomorphic forms of an input graph into a canonical form. After
canonicalization, isomorphism tests are reduced to mere identity tests.

The canonicalization itself, however, is computationally at least as expensive
as an isomorphism itself. Therefore, no expense is saved if an isomorphism test
is to be computed only once for two molecules by canonizing both. Only if a
molecule instance is to be a repeated candidate for isomorphism tests is there
value in canonizing it.

This library takes the approach of adding a tag to molecules that identifies
which components of the graph and stereocenters have been used in the
generation of the canonical form. This tag is voided with the use of any
non-const member function. Pay close attention to the documentation of
comparison member functions and operators to ensure that you are making good use
of the provided shortcuts.

It is important to note that canonicalization information is only retained
across IO boundaries using JSON and the associated .masm or .json file suffixes.

The member functions provided are very modular. If you want the strictest
definition of isomorphism, then the default arguments to canonicalize are
correct, after which operator == defaults to an identity permutation check:

@code{.cpp}
Molecule a = ..., b = ...;
// Assuming a and be are non-canonical, i.e.:
// a.canonicalComponents() == AtomEnvironmentComponents::None

bool isomorphic = (a == b); // Backtracking boost algorithm for isomorphism, slow

a.canonicalize(); // Canonicalization, slow
// Now: a.canonicalComponents() == AtomEnvironmentComponents::All

isomorphic = (a == b); // Full isomorphism check (like before) since b is not canonical, slow

b.canonicalize(); // Canonicalization, slow
// Now: b.canonicalComponents() == AtomEnvironmentComponents::All

isomorphic = (a == b); // Identitity permutation isomorphism check, fast
@endcode

If, instead, you want to use a limited definition of equality, then you can
specify fewer components of molecules for use in canonicalization or comparison:

@code{.cpp}
Molecule a = ..., b = ...;
// Assuming a and be are non-canonical, i.e.:
// a.canonicalComponents() == AtomEnvironmentComponents::None

// Isomorphism with just element types and bond orders
AtomEnvironmentComponents componentsMask = AtomEnvironmentComponents::ElementTypes
  | AtomEnvironmentComponents::BondOrders;

bool myIsomorphism = a.modularCompare(b, componentsMask); // Full isomorphism, slow

a.canonicalize(componentsMask); // Canonicalization, slow
b.canonicalize(componentsMask); // Canonicalization, slow
// Now: a.canonicalComponents() == b.canonicalComponents() == componentsMask

myIsomorphism = a.canonicalCompare(b, componentsMask); // Identity permutation check, fast!

// This, however, calls modularCompare with AtomEnvironmentComponents::All despite 
// partial canonicalization. Different canonizations are not cross-comparable,
// and operator == will always use the strictest definition of equality
bool isomorphic = (a == b);
@endcode

@section manual-molecules Working with Molecules

--------------------------------------------------------------------------------

@subsection manual-molecules-stereopermutators Stereopermutators

Currently, this library models two types of stereocenters: The first models the
atom-centric relative placement of substituents across geometries ranging from
linear to square-antiprismatic. The second type models configurational
permutations owing to bond-centric rotational barriers.

In order to determine whether a particular atom in a molecule is an atom-centric
stereocenter, its substituents are ranked according to a nearly-compliant
implementation of the IUPAC sequence rules as laid out in the 2013 Blue Book.
The rankings are transformed into an abstract substituent case (e.g. octahedral
(A-A)BBCD) and a symbolic computation is carried out to determine the number of
permutations that are not superimposable via spatial rotations within the
idealized shape. The set of resulting permutations of the substituent symbols
is called the set of stereopermutations. If this set contains more than one
stereopermutation, then the atom is an atom-centric stereocenter under that
shape.

If substituents are haptic or multidentate, an additional algorithm removes
stereopermutations it deems clearly impossible. All bridge lengths between
pairs of chelating atoms of a multidentate ligand are checked against the atom
pair's bite angle within the idealized shape. Additionally, haptic ligands'
cones are checked to ensure they do not overlap. Indices within the set of not
clearly impossible stereopermutations are called assignments.

Bond-centric stereocenters model rotational configurations of arbitrary
combinations of two shapes and their respective fused shape positions.
The fused shape positions of each side affect the overall permutations if the
shape has multiple position groups. For instance, this is the case in square
pyramidal shapes, where there are axial and equatorial shape positions.


@subsection manual-molecules-construction Molecule construction

In order to create a molecule instance, information can be supplied and inferred
in many ways. 

Minimally, the atoms' element types and their connectivity are needed to
constitute a molecule's graph. From a graph, the presence of stereocenters can
be inferred by using algorithms to determine the local shape at an atom using
information present in the graph about its substituents. Any inferred
stereocenters are unassigned, i.e. generated conformers will be composed of
all possible stereopermutations at those stereocenters.

Atom connectivity can also be discretized from a bond order matrix, which in
turn can be very roughly approximated using pairwise atom distances from spatial
information.

Atom-centric shapes and its stereocenter assignments can be gleaned from
spatial information.

Bond-centric stereocenters are interpreted at each bond where both ends have an
assigned atom-centric stereocenter. If the supplied conformation matches a
permutation of the bond-centric stereocenter, the bond-centric stereocenter is
assigned and kept. Incidental matches and undesired dihedral freezes can be
avoided by specifying a minimal bond order for which a rotational barrier can
exist. Any bonds whose bond orders do not meet this threshold are not considered
for bond-centric stereocenter interpretation.

Molecular file formats supply varying levels of information about molecules,
ranging from the XYZ format, which supplies merely element types and spatial
information, to the MOLFile format, which supplies element types, discretized
connectivity and spatial information.

@remark The preferred method for mass molecule construction is binary
  discretization from supplied fractional bond orders and coordinate information.

@remark Nearest-integer bond discretization has pitfalls for conjugated
  systems, and the calculation of bond orders from spatial distances only is
  unreliable due to the limited underlying model of UFF bond distances.


@subsection manual-molecules-options Behavioral options

The global behavior of the library can be altered in several respects.

In some cases, whether an atom is a stereocenter is dependent on ambient
temperature. Trigonal-pyramidal nitrogen can invert rapidly at room temperature,
but is a stereocenter at low temperature. By default, the library invokes the
high-temperature approximation, where trigonal-pyramidal nitrogen centers can
only be a stereocenter if it is part of a small cycle (sizes 3, 4) where the
strain hinders inversion.

While editing a molecule on the graph level, the library attempts to propagate
existing chiral state in its list of stereocenters to the new graph. By default,
state is propagated only if a singular mapping of indices to the new shape
exists in which no shape angles are altered. Which propagations of chiral
state are acceptable can be altered.

The pseudo-random number generator is centralized and can be re-seeded for
reproducible behavior.

@subsection manual-molecules-editing Editing molecules

The maxim of the library is to permit the specification of any desired graph,
however unreasonable, within the logical constraints of the molecular model.
These constraints are that a Molecule class can only contain a single connected
component and must consist of at least one atom. Apart from that, you can
create completely unreasonable graphs. Keep in mind, however, that these can be
at odds with either the reduction of stereopermutations to assignments, where
algorithms throw out obviously impossible permutations (yielding stereocenters
with no possible assignments) or with the library's spatial modeling in
conformer generation.

Information about a Molecule can be obtained from its constituting graph and
stereocenter list classes, but editing is centralized at the Molecule interface
since graph and stereocenter changes force a full re-ranking of all atoms and
possibly changes in the list of stereocenters.

Among the possible changes in the list of stereocenters on re-ranking are:

- Stereocenters may change the number of possible assignments. This means a
  stereocenter may become chiral (i.e. there are multiple stereopermutations) or
  cease to be chiral (there is only one stereopermutation).
- If a stereocenter is assigned, its assignment may change.

It is therefore important that **upon each molecular edit**, any state about or
within the StereocenterList of the molecule being edit that is stored externally
to the instance itself is considered invalidated.

@subsection manual-molecules-eta The Eta bond type

On a graph level, each constituting atom of a haptic ligand that is part of the
bond of the ligand to a transition metal must have a bond to that transition
metal. These bonds are of the Eta bond type, regardless of their individual
order. It is, however, the task of the library to differentiate which bonds
between atoms are to be considered an Eta bond type and which are not, based
wholly upon the graph structure. The public API of molassembler does not accept
user-defined Eta bond types. Specify Single as bond type in the creation of
haptic bonding.

@subsection manual-molecules-conformers Conformer generation

The generation of conformational ensembles of molecular graphs has a few
peculiarities you need to know about.

For one, it is very explicit in the library that conformer generation can fail.
The possibility of failure is expressed by the explicit Result type of conformer
generation interfaces, which is essentially a two-state variant type holding
either your requested conformational ensemble or some information about the
reason for failure. The possibility of failure is explicit precisely to force
you to consider it when integrating this library. A molecule you have generated
may have stereocenters with no possible assignments due to too short bridge
lengths for multidentate ligands or too many large haptic ligands whose cones
overlap in any arrangements. It may also conflict with the spatial model, which
has upper limits on granted slack for particularly strained graphs.

Furthermore, the conformer generation sequence will increase modeling tolerances
for each progressive embedding failure across the entire molecule. Even if only
one part of your molecule is strained and requires this additional effort, the
spatial model for the entire molecule will slacken, reducing local shape
idealization strictness even in clear-cut cases. Heavily loosened tolerances can
lead to odd-looking spatial structures. In those cases, you may want to further
refine these with force field or semiempirical quantum chemical methods before
running any more precise calculations.

@section known-issues Known issues

--------------------------------------------------------------------------------

@subsection ranking-deficiencies Ranking algorithm deficiencies
No regularization of Mancude rings and rings systems is performed in sequence
rule 1. This can lead to false differences between substituents when they are
actually identical.

@subsection known-issues-rotational-isomery Rotational isomery
The current data model of bond-centric stereocenters can treat a large number of
cases correctly, but is insufficient. For instance, allene systems' rotational
isomery cannot be captured with the current model.

@subsection known-issues-helicity Helicity
No stereodescriptors or ranking algorithms for helicity are implemented.

@subsection known-issues-conjugation Conjugated systems
No detection algorithms are in place to find conjugated systems. Conjugated
systems would require special care in the following places:

- In ranking, the enumeration of Kekule structures is part of a sequence rule
  priority determination algorithm.
- In bond order discretization, if nearest integer discretization is chosen,
  aromatic bond orders (around 1.5) may be randomly rounded up or down, with no
  care taken to generate a Kekule structure of a contained conjugated system
- In molecule comparison, mesomer kekule structures may not be recognized as
  equivalent molecules

@section manual-glossary Glossary

--------------------------------------------------------------------------------

*/
